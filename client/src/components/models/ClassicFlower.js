/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';

export function VHappyClassicFlower(props) {
  const { nodes, materials } = useGLTF('/models/classic/vhappy.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={materials.face}
        position={[0, 4.996, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Petals.geometry}
        material={materials.petals}
        position={[0, 4.996, 0]}
        rotation={[0.348, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Stem.geometry}
        material={materials['stem and leaves']}
        position={[-0.77, 3.366, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, -1.041]}
        rotation={[-0.864, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, 1.07]}
        rotation={[0.895, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cheeks.geometry}
        material={materials.cheeks}
        position={[0.25, 4.978, 0.646]}
        rotation={[-0.02, -0.267, -0.048]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Eyes.geometry}
        material={materials['eyes and mouth']}
        position={[0.274, 4.756, 0.514]}
        rotation={[Math.PI / 2, 0, -1.374]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mouth.geometry}
        material={materials['eyes and mouth']}
        position={[0.311, 4.692, 0]}
        rotation={[-Math.PI / 2, 0.04, Math.PI / 2]}
      />
    </group>
  )
}

export function HappyClassicFlower(props) {
  const { nodes, materials } = useGLTF('/models/classic/happy.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={materials.face}
        position={[0, 4.996, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Petals.geometry}
        material={materials.petals}
        position={[0, 4.996, 0]}
        rotation={[0.348, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Stem.geometry}
        material={materials['stem and leaves']}
        position={[-0.77, 3.366, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, -1.041]}
        rotation={[-0.864, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, 1.07]}
        rotation={[0.895, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Eyes.geometry}
        material={materials['eyes and mouth']}
        position={[0.262, 5.147, 0.551]}
        rotation={[0, -0.267, 0.027]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mouth.geometry}
        material={materials['eyes and mouth']}
        position={[0.312, 4.675, 0]}
        rotation={[Math.PI / 2, 0.046, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cheeks.geometry}
        material={materials.cheeks}
        position={[0.25, 4.978, 0.646]}
        rotation={[-0.02, -0.267, -0.048]}
      />
    </group>
  )
}

export function NeutralClassicFlower(props) {
  const { nodes, materials } = useGLTF('/models/classic/neutral.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={materials.face}
        position={[0, 4.996, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Petals.geometry}
        material={materials.petals}
        position={[0, 4.996, 0]}
        rotation={[0.348, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Stem.geometry}
        material={materials['stem and leaves']}
        position={[-0.77, 3.366, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, -1.041]}
        rotation={[-0.864, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, 1.07]}
        rotation={[0.895, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Eyes.geometry}
        material={materials['eyes and mouth']}
        position={[0.262, 5.147, 0.551]}
        rotation={[0, -0.267, 0.027]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cheeks.geometry}
        material={materials.cheeks}
        position={[0.25, 4.978, 0.646]}
        rotation={[-0.02, -0.267, -0.048]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsCurve.geometry}
        material={materials['eyes and mouth']}
        position={[0.318, 3.841, 0]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
      />
    </group>
  )
}

export function SadClassicFlower(props) {
  const { nodes, materials } = useGLTF('/models/classic/sad.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={materials.face}
        position={[0, 4.996, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Petals.geometry}
        material={materials.petals}
        position={[0, 4.996, 0]}
        rotation={[0.348, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Stem.geometry}
        material={materials['stem and leaves']}
        position={[-0.77, 3.366, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, -1.041]}
        rotation={[-0.864, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, 1.07]}
        rotation={[0.895, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Eyes.geometry}
        material={materials['eyes and mouth']}
        position={[0.262, 5.147, 0.551]}
        rotation={[0, -0.267, 0.027]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mouth.geometry}
        material={materials['eyes and mouth']}
        position={[0.312, 4.873, 0]}
        rotation={[-Math.PI / 2, 0.213, 1.571]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cheeks.geometry}
        material={materials.cheeks}
        position={[0.25, 4.978, 0.646]}
        rotation={[-0.02, -0.267, -0.048]}
      />
    </group>
  )
}

export function VSadClassicFlower(props) {
  const { nodes, materials } = useGLTF('/models/classic/vsad.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={materials.face}
        position={[0, 4.996, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Petals.geometry}
        material={materials.petals}
        position={[0, 4.996, 0]}
        rotation={[0.348, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Stem.geometry}
        material={materials['stem and leaves']}
        position={[-0.77, 3.366, 0]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Right_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, -1.041]}
        rotation={[-0.864, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Left_Leaf.geometry}
        material={materials['stem and leaves']}
        position={[-0.008, 1.126, 1.07]}
        rotation={[0.895, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cheeks.geometry}
        material={materials.cheeks}
        position={[0.25, 4.978, 0.646]}
        rotation={[-0.02, -0.267, -0.048]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Eyes.geometry}
        material={materials['eyes and mouth']}
        position={[0.276, 5.131, 0]}
        rotation={[-1.571, -0.085, -1.374]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mouth.geometry}
        material={materials['eyes and mouth']}
        position={[-0.044, 3.449, 0]}
        rotation={[1.57, -0.242, -1.574]}
      />
    </group>
  )
}

useGLTF.preload('/models/classic/vhappy.glb')
useGLTF.preload('/models/classic/happy.glb')
useGLTF.preload('/models/classic/neutral.glb')
useGLTF.preload('/models/classic/sad.glb')
useGLTF.preload('/models/classic/vsad.glb')